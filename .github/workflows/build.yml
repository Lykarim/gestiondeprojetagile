name: Build-Analyze-Deliver-Deploy
on:
  push:
    branches:
      - test2

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Unit Testing
        run: mvn test -Put

      - name: Integration Testing
        run: mvn test -Pit

      - name: Quality Gate
        run: |
          mvn clean verify sonar:sonar \
            -Dsonar.organization=lykarim \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.projectKey=Lykarim_gestiondeprojetagile

      - name: Check Quality Gate
        run: |
          echo "Checking Quality Gate status..."
          curl -X GET -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/qualitygates/project_status?projectKey=Lykarim_gestiondeprojetagile" \
            -o quality_gate_status.json
          QUALITY_STATUS=$(jq -r '.projectStatus.status' quality_gate_status.json)
          echo "Quality Gate status: $QUALITY_STATUS"
          if [ "$QUALITY_STATUS" != "OK" ]; then
            echo "Quality Gate failed!"
            exit 1
          fi

      - name: Package
        run: mvn -B package -DskipTests=true

      - name: Login to Docker Hub
        run: |
          docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_TOKEN}}

      - name: Build Docker image
        run: |
          docker build -t ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REGISTRY_IMAGE}}:${{ github.sha }} .
          docker tag ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REGISTRY_IMAGE}}:${{ github.sha }} ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REGISTRY_IMAGE}}:latest

      - name: Publish Docker image versions
        run: |
         docker push ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REGISTRY_IMAGE }}:${{ github.sha }}
         docker push ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REGISTRY_IMAGE }}:latest

      - name: Set up SSH
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > kira.pem
          chmod 600 kira.pem

      - name: Deploy to Dev
        run: |
          echo "1) Login to my remote server ..."
          ssh -o StrictHostKeyChecking=no -i kira.pem ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << EOF
            echo "2) Stop docker container if running ..."
            sudo docker stop myapp1 || true
            sudo docker rm myapp1 || true
            echo "3) Pull latest version and run it ...."
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REGISTRY_IMAGE }}:latest
            sudo docker run -d --name myapp1 -p 80:80 ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REGISTRY_IMAGE }}:latest
          EOF

      - name: Wait for deploy to finish
        run: sleep 30

      - name: Check deploy
        run: |
          echo "1) Run Get request to check if service is running..."
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://68.221.168.79:80/cicd/_health)
          if [ "$RESPONSE" -ne 200 ]; then
            echo "Deploy failed!"
            exit 1
          else
            echo "Deploy succeeded! Service is running."
          fi
        shell: /usr/bin/bash -e {0}
        env:
          JAVA_HOME: /opt/hostedtoolcache/Java_Zulu_jdk/17.0.11-9/x64
          JAVA_HOME_17_X64: /opt/hostedtoolcache/Java_Zulu_jdk/17.0.11-9/x64
